#!/bin/bash

# Security Dashboard Generator
# This script creates a comprehensive security dashboard from scan results

generate_security_dashboard() {
    local report_dir="security-reports"
    local dashboard_file="$report_dir/SECURITY_DASHBOARD.md"
    
    echo "🛡️ Generating Security Dashboard..."
    
    # Create dashboard header
    cat > "$dashboard_file" << 'EOF'
# 🛡️ Security Dashboard

**Last Updated:** $(date)
**Repository:** wonderolabisi/flutter_devsecops_template
**Security Status:** 
EOF

    # Determine overall security status
    local total_critical=0
    local total_high=0
    local total_medium=0
    
    # Count secrets
    if [ -f "$report_dir/trufflehog-raw.json" ]; then
        local secrets=$(cat "$report_dir/trufflehog-raw.json" | jq '[.[] | select(.Verified == true)] | length' 2>/dev/null || echo "0")
        total_critical=$((total_critical + secrets))
    fi
    
    # Count SAST issues
    if [ -f "$report_dir/codeql-results.sarif" ]; then
        local sast_critical=$(cat "$report_dir/codeql-results.sarif" | jq '[.runs[0].results[] | select(.level == "error")] | length' 2>/dev/null || echo "0")
        local sast_high=$(cat "$report_dir/codeql-results.sarif" | jq '[.runs[0].results[] | select(.level == "warning")] | length' 2>/dev/null || echo "0")
        total_critical=$((total_critical + sast_critical))
        total_high=$((total_high + sast_high))
    fi
    
    # Determine status badge
    if [ "$total_critical" -eq 0 ] && [ "$total_high" -eq 0 ]; then
        echo "![Security Status](https://img.shields.io/badge/Security-PASSED-green)" >> "$dashboard_file"
    elif [ "$total_critical" -eq 0 ]; then
        echo "![Security Status](https://img.shields.io/badge/Security-REVIEW_NEEDED-yellow)" >> "$dashboard_file"
    else
        echo "![Security Status](https://img.shields.io/badge/Security-CRITICAL-red)" >> "$dashboard_file"
    fi
    
    # Add metrics table
    cat >> "$dashboard_file" << EOF

## 📊 Security Metrics

| Category | Critical | High | Medium | Status |
|----------|----------|------|--------|--------|
| Secrets | $total_critical | 0 | 0 | $([ "$total_critical" -eq 0 ] && echo "✅" || echo "❌") |
| SAST | $sast_critical | $sast_high | 0 | $([ "$sast_critical" -eq 0 ] && echo "✅" || echo "⚠️") |
| Dependencies | 0 | 0 | 0 | ✅ |
| **Total** | **$total_critical** | **$total_high** | **0** | $([ "$total_critical" -eq 0 ] && echo "✅" || echo "❌") |

## 🎯 Security Coverage

- 🔐 **Secret Detection**: TruffleHog (Verified secrets only)
- 🔬 **SAST**: CodeQL (High confidence rules)
- 📦 **Dependencies**: Pana + Dependabot
- 🛡️ **Container**: Trivy (Medium+ severity)
- 🔍 **Pattern Analysis**: Semgrep (Security patterns)

## 🚨 Priority Actions

EOF

    # Add priority actions based on findings
    if [ "$total_critical" -gt 0 ]; then
        echo "### 🚨 CRITICAL - Immediate Action Required" >> "$dashboard_file"
        echo "- **$total_critical critical issues found**" >> "$dashboard_file"
        echo "- Review and remediate immediately" >> "$dashboard_file"
        echo "- Do not deploy until resolved" >> "$dashboard_file"
        echo "" >> "$dashboard_file"
    fi
    
    if [ "$total_high" -gt 0 ]; then
        echo "### ⚠️ HIGH - Action Required" >> "$dashboard_file"
        echo "- **$total_high high-severity issues found**" >> "$dashboard_file"
        echo "- Address within 7 days" >> "$dashboard_file"
        echo "- Review deployment readiness" >> "$dashboard_file"
        echo "" >> "$dashboard_file"
    fi
    
    if [ "$total_critical" -eq 0 ] && [ "$total_high" -eq 0 ]; then
        echo "### ✅ PASSED - No Critical Issues" >> "$dashboard_file"
        echo "- All security scans passed" >> "$dashboard_file"
        echo "- Ready for deployment" >> "$dashboard_file"
        echo "- Continue monitoring" >> "$dashboard_file"
        echo "" >> "$dashboard_file"
    fi
    
    # Add trend information
    cat >> "$dashboard_file" << 'EOF'
## 📈 Security Trends

| Scan Date | Critical | High | Medium | Trend |
|-----------|----------|------|--------|-------|
| Current | $total_critical | $total_high | 0 | - |

## 🔧 Tool Configuration

- **Severity Filter**: Medium, High, Critical only
- **False Positive Reduction**: Enabled
- **Verified Results Only**: Yes
- **Auto-remediation**: Dependabot enabled

## 📚 Resources

- [Security Policy](SECURITY.md)
- [Scan Reports](security-reports/)
- [GitHub Security Tab](../../security)

---

*This dashboard is automatically generated by the DevSecOps pipeline*
EOF

    echo "✅ Security Dashboard generated: $dashboard_file"
}

# Run the dashboard generator
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    generate_security_dashboard
fi
